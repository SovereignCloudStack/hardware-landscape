---
- name: Get capi-system namespace phase
  ansible.builtin.shell: |
    set -o pipefail

    export KUBECONFIG=/root/.kube/config

    kubectl get ns capi-system -o json --ignore-not-found=true | jq .status.phase -r
  args:
    executable: /bin/bash
  register: result
  changed_when: false


- name: Copy cspo-template.yaml file
  ansible.builtin.template:
    src: cspo-template.yaml.j2
    dest: "{ templated_files_path }}/cspo-template.yaml"
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    mode: 0640


- name: Copy clusterstack.yaml file
  ansible.builtin.template:
    src: clusterstack.yaml.j2
    dest: "{ templated_files_path }}/clusterstack.yaml"
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    mode: 0640

- name: Copy cluster.yaml file
  ansible.builtin.template:
    src: cluster.yaml.j2
    dest: "{ templated_files_path }}/cluster.yaml"
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    mode: 0640

- name: Set capi-system-phase fact
  ansible.builtin.set_fact:
    capi_system_phase: "{{ result.stdout_lines[0] | default('') }}"

- name: Initialize the CAPI management cluster
  ansible.builtin.shell: |
    set -o pipefail
    set -x
    export KUBECONFIG=/root/.kube/config
    export EXP_CLUSTER_RESOURCE_SET=true
    export EXP_RUNTIME_SDK=true
    export CLUSTER_TOPOLOGY=true
    export GOPROXY=off

    clusterctl init \
      --core cluster-api:v{{ clusterstacks_capi_version }} \
      --bootstrap kubeadm:v{{ clusterstacks_capi_version }} \
      --control-plane kubeadm:v{{ clusterstacks_capi_version }} \
      --infrastructure openstack:v{{ clusterstacks_capo_version }};
  args:
    executable: /bin/bash
  register: result
  changed_when: "'Your management cluster has been initialized successfully' in result.stdout"
  when: capi_system_phase == ""

- name: Upgrade the CAPI management cluster
  ansible.builtin.shell: |
    set -o pipefail

    export KUBECONFIG=/root/.kube/config
    export EXP_CLUSTER_RESOURCE_SET=true
    export EXP_RUNTIME_SDK=true
    export CLUSTER_TOPOLOGY=true
    export GOPROXY=off

    clusterctl upgrade apply \
      --core cluster-api:v{{ clusterstacks_capi_version }} \
      --bootstrap kubeadm:v{{ clusterstacks_capi_version }} \
      --control-plane kubeadm:v{{ clusterstacks_capi_version }} \
      --infrastructure openstack:v{{ clusterstacks_capo_version }};
  args:
    executable: /bin/bash
  register: result
  changed_when: "'Performing upgrade' in result.stdout"
  when: capi_system_phase == "Active"

- name: Install Cluster Stack Operator
  ansible.builtin.shell: |
    helm upgrade -i cso -n cso-system \
    --create-namespace oci://registry.scs.community/cluster-stacks/cso \
    --set clusterStackVariables.ociRepository=registry.scs.community/csctl-oci/openstack

- name: Install Cluster Stack Openstack Operator
  ansible.builtin.shell: |
    helm upgrade -i cspo -n cspo-system \
    --create-namespace oci://registry.scs.community/cluster-stacks/cspo \
    --set clusterStackVariables.ociRepository=registry.scs.community/csctl-oci/openstack
