{
  "AUTO_TECHSUPPORT": {
    "GLOBAL": {
      "max_core_limit": "5.0",
      "max_techsupport_limit": "10.0",
      "rate_limit_interval": "180",
      "since": "2 days ago",
      "state": "enabled"
    }
  },
  "AUTO_TECHSUPPORT_FEATURE": {
    "bgp": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "database": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "dhcp_relay": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    {%- if dhcp_snoop_enabled | default(true) %}
    "dhcp_snoop": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },{%- endif %}
    {%- if dot1x_enabled | default(true) %}
    "dot1x": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },{%- endif %}
    "iccpd": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "lldp": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "macsec": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    {%- if mcast_enabled | default(true) %}
    "mcast": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },{%- endif %}
    "mgmt-framework": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "mux": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "nat": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "p4rt": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "pmon": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "radv": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "sflow": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "snmp": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "stp": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "swss": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "syncd": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "teamd": {
      "rate_limit_interval": "600",
      "state": "enabled"
    },
    "telemetry": {
      "rate_limit_interval": "600",
      "state": "enabled"
    }
  },
  {%- set filtered_interfaces = [] %}
  {%- for interface in device.interfaces.all() %}
    {%- if not interface.mgmt_only and not interface.is_virtual %}
      {%- set _ = filtered_interfaces.append(interface) %}
    {%- endif %}
  {%- endfor %}
  "BGP_GLOBALS": {
        "default": {
            "local_asn": "65000",
            "router_id": "10.0.1.2"
        }
    },
     "BGP_PEER_GROUP": {
        "default|LEAF": {
            "admin_status": "true",
	    "asn": "65501",
            "peer_type": "external"
        }
   },
  "CRM": {
    "Config": {
      "acl_counter_high_threshold": "85",
      "acl_counter_low_threshold": "70",
      "acl_counter_threshold_type": "percentage",
      "acl_entry_high_threshold": "85",
      "acl_entry_low_threshold": "70",
      "acl_entry_threshold_type": "percentage",
      "acl_group_high_threshold": "85",
      "acl_group_low_threshold": "70",
      "acl_group_threshold_type": "percentage",
      "acl_table_high_threshold": "85",
      "acl_table_low_threshold": "70",
      "acl_table_threshold_type": "percentage",
      "dnat_entry_high_threshold": "85",
      "dnat_entry_low_threshold": "70",
      "dnat_entry_threshold_type": "percentage",
      "fdb_entry_high_threshold": "85",
      "fdb_entry_low_threshold": "70",
      "fdb_entry_threshold_type": "percentage",
      "ipmc_entry_high_threshold": "85",
      "ipmc_entry_low_threshold": "70",
      "ipmc_entry_threshold_type": "percentage",
      "ipv4_neighbor_high_threshold": "85",
      "ipv4_neighbor_low_threshold": "70",
      "ipv4_neighbor_threshold_type": "percentage",
      "ipv4_nexthop_high_threshold": "85",
      "ipv4_nexthop_low_threshold": "70",
      "ipv4_nexthop_threshold_type": "percentage",
      "ipv4_route_high_threshold": "85",
      "ipv4_route_low_threshold": "70",
      "ipv4_route_threshold_type": "percentage",
      "ipv6_neighbor_high_threshold": "85",
      "ipv6_neighbor_low_threshold": "70",
      "ipv6_neighbor_threshold_type": "percentage",
      "ipv6_nexthop_high_threshold": "85",
      "ipv6_nexthop_low_threshold": "70",
      "ipv6_nexthop_threshold_type": "percentage",
      "ipv6_route_high_threshold": "85",
      "ipv6_route_low_threshold": "70",
      "ipv6_route_threshold_type": "percentage",
      "mpls_inseg_high_threshold": "85",
      "mpls_inseg_low_threshold": "70",
      "mpls_inseg_threshold_type": "percentage",
      "mpls_nexthop_high_threshold": "85",
      "mpls_nexthop_low_threshold": "70",
      "mpls_nexthop_threshold_type": "percentage",
      "nexthop_group_high_threshold": "85",
      "nexthop_group_low_threshold": "70",
      "nexthop_group_member_high_threshold": "85",
      "nexthop_group_member_low_threshold": "70",
      "nexthop_group_member_threshold_type": "percentage",
      "nexthop_group_threshold_type": "percentage",
      "polling_interval": "300",
      "snat_entry_high_threshold": "85",
      "snat_entry_low_threshold": "70",
      "snat_entry_threshold_type": "percentage"
    }
  },
  "DEVICE_METADATA": {
    "localhost": {
      "buffer_model": "traditional",
      "default_bgp_status": "up",
      "default_pfcwd_status": "disable",
      "docker_routing_config_mode": "unified",
      "frr_mgmt_framework_config": "true",
      "hostname": "{{ device.name }}",
      "hwsku": "{{ hwsku }}",
      "mac": "{{ mac_addr }}",
      "platform": "{{ platform }}",
      "synchronous_mode": "enable",
      "type": "{{ device.role.name }}"
    }
  },
  {%- if dot1x_enabled|default(true) %}
  "DOT1X_INITIAL": {
    "GLOBAL": {
      "ports": "{{ filtered_interfaces | sort(attribute='name') | join(',') }}"
    }
  },{%- endif %}
  "FEATURE": {
    "bgp": {
      "auto_restart": "enabled",
      "has_global_scope": "False",
      "has_per_asic_scope": "True",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "database": {
      "auto_restart": "always_enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "True",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "always_enabled"
    },
    "dhcp_relay": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    {%- if dhcp_snoop_enabled | default(true) %}
    "dhcp_snoop": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "disabled"
    },{%- endif %}
    {%- if dot1x_enabled | default(true) %}
    "dot1x": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },{%- endif %}
    "iccpd": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "lldp": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "True",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "kube",
      "state": "enabled"
    },
    "macsec": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "disabled"
    },
    {%- if mcast_enabled | default(true) %}
    "mcast": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },{%- endif %}
    "mgmt-framework": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "mux": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "always_disabled"
    },
    "nat": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "p4rt": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "pmon": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "kube",
      "state": "enabled"
    },
    "radv": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "kube",
      "state": "enabled"
    },
    "sflow": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "snmp": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "kube",
      "state": "enabled"
    },
    "stp": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "swss": {
      "auto_restart": "enabled",
      "has_global_scope": "False",
      "has_per_asic_scope": "True",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "syncd": {
      "auto_restart": "enabled",
      "has_global_scope": "False",
      "has_per_asic_scope": "True",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "teamd": {
      "auto_restart": "enabled",
      "has_global_scope": "False",
      "has_per_asic_scope": "True",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "local",
      "state": "enabled"
    },
    "telemetry": {
      "auto_restart": "enabled",
      "has_global_scope": "True",
      "has_per_asic_scope": "False",
      "has_timer": "False",
      "high_mem_alert": "disabled",
      "set_owner": "kube",
      "state": "enabled"
    }
  },
  "FLEX_COUNTER_TABLE": {
    "ACL": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "disable",
      "POLL_INTERVAL": "10000"
    },
    "BUFFER_POOL_WATERMARK": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "PFCWD": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "PG_DROP": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "PG_WATERMARK": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "PORT": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "PORT_BUFFER_DROP": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "QUEUE": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "QUEUE_WATERMARK": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    },
    "RIF": {
      "FLEX_COUNTER_DELAY_STATUS": "false",
      "FLEX_COUNTER_STATUS": "enable"
    }
  },
  "KDUMP": {
    "config": {
      "enabled": "true",
      "memory": "0M-2G:256M,2G-4G:320M,4G-8G:384M,8G-:448M",
      "num_dumps": "3"
    }
  },
  "MGMT_INTERFACE": {
  {%- for interface in device.interfaces.all() if interface.mgmt_only == true %}
    "{{ interface.name }}|{{ interface.ip_addresses.first().address }}": {
      "gwaddr": "{{ mgmt_gwaddr }}"
    }
    {%- if not loop.last %},{%- endif %}
  {%- endfor %}
  },
  "MGMT_PORT": {
  {%- for interface in device.interfaces.all() if interface.mgmt_only == true %}
    "{{ interface.name }}": {
      "admin_status": "{% if interface.enabled %}up{% else %}down{% endif %}",
      "alias": "{{ interface.name }}",
      "description": "{{ interface.description }}"
    }
    {%- if not loop.last %},{%- endif %}
  {%- endfor %}
  },
  {%- if mgmt_vrf_config %}
  "MGMT_VRF_CONFIG": {
    "vrf_global": {
      "mgmtVrfEnabled": "{{ mgmt_vrf_config.vrf_global.mgmt_vrf_enabled | default('false') }}"
    }
  },{%- endif %}
  {%- if ntp_servers %}
  "NTP_SERVER": {
  {%- for server in ntp_servers %}
    "{{ server }}": {}{%- if not loop.last %},{%- endif %}
  {%- endfor %}
  },{%- endif %}
  "PORT": {
  {%- for interface in filtered_interfaces | sort(attribute='name') %}
    "{{ interface.name }}": {
      "admin_status": "{% if interface.enabled %}up{% else %}down{% endif %}",
      "alias": "{{ interface.custom_field_data['alias'] | default('') }}",
      {%- if interface.custom_field_data['autoneg'] %}
      "autoneg": "{{ interface.custom_field_data['autoneg'] }}",
      {%- endif %}
      {%- if interface.description %}
      "description": "{{ interface.description }}",
      {%- endif %}
      "index": "{{ interface.custom_field_data['index'] | default('') }}",
      "lanes": "{{ interface.custom_field_data['lanes'] | default('') }}",
      "mtu": "{{ interface.mtu if interface.mtu else 9100 }}",
      "parent_port": "{{ interface.parent_port | default(interface.name) }}",
      "speed": "{{ (interface.speed if interface.speed else 0) | int // 1000 }}"
    }
    {%- if not loop.last %},{%- endif %}
  {%- endfor %}
  },
  {%- set filtered_port_channel_interfaces = [] %}
  {%- for interface in device.interfaces.all() %}
    {%- if interface.is_lag and 'portchannel' in interface.name | lower %}
      {%- set _ = filtered_port_channel_interfaces.append(interface) %}
    {%- endif %}
  {%- endfor %}
  {%- if port_channels_params and filtered_port_channel_interfaces %}
  "PORTCHANNEL": {
  {%- for lag_interface in filtered_port_channel_interfaces | sort(attribute='name') %}
    "{{ lag_interface.name }}": {
      "admin_status": "{% if lag_interface.enabled %}up{% else %}down{% endif %}",
      "fast_rate": "{{ port_channels_params[lag_interface.name].fast_rate }}",
      "lacp_key": "{{ port_channels_params[lag_interface.name].lacp_key }}",
      "min_links": "{{ port_channels_params[lag_interface.name].min_links }}",
      "mix_speed": "{{ port_channels_params[lag_interface.name].mix_speed }}",
      "mtu": "{{ lag_interface.mtu if lag_interface.mtu else 9100 }}"
    }
    {%- if not loop.last %},{%- endif %}
  {%- endfor %}
  },
  "PORTCHANNEL_MEMBER": {
  {%- for lag_interface in filtered_port_channel_interfaces | sort(attribute='name') %}
    {%- for interface in lag_interface.member_interfaces.all() | sort(attribute='name') %}
    "{{ lag_interface.name }}|{{ interface.name }}": {}
    {%- if not loop.last %},{%- endif %}
    {%- endfor %}
  {%- endfor %}
  },{%- endif %}
  "REST_SERVER": {
    "default": {
      "client_auth": "user"
    }
  },
  {%- if snmp %}
  "SNMP": {
    "LOCATION": {
      "Location": "{{ snmp.location }}"
    }
  },
  "SNMP_COMMUNITY": {
  {%- for community in snmp.communities %}
    "{{ community['name'] }}": {
      "TYPE": "{{ community['type'] | upper }}"
    }{% if not loop.last %},{% endif %}
  {%- endfor %}
  },{% endif %}
  {%- if static_routes %}
  "STATIC_ROUTE": {
  {%- for static_route in static_routes %}
    "{{ static_route['route'] }}": {
      "blackhole": "{{ static_route['blackhole'] }}",
      "distance": "{{ static_route['distance'] }}",
      "ifname": "{{ static_route['ifname'] }}",
      "nexthop": "{{ static_route['nexthop'] }}",
      "nexthop-vrf": "{{ static_route['nexthop-vrf'] }}"
    }{% if not loop.last %},{% endif %}
  {%- endfor %}
  },{%- endif %}
  {%- if syslog_servers %}
  "SYSLOG_SERVER": {
  {%- for syslog_server in syslog_servers %}
    "{{ syslog_server }}": {}
    {%- if not loop.last %},{%- endif %}
  {%- endfor %}
  },{%- endif %}
  "VERSIONS": {
    "DATABASE": {
      "VERSION": "version_2_0_4"
    }
  },
  {%- set vlans = [] %}
  {%- set vlan_members = {} %}
  {%- for interface in device.interfaces.all() %}
    {%- for vlan in interface.tagged_vlans.all() %}
      {%- set key = vlan.name + '|' + interface.name %}
      {%- set _ = vlans.append(vlan) %}
      {%- set _ = vlan_members.update({key: {'tagging_mode': 'tagged'}}) %}
    {%- endfor %}
    {%- if interface.untagged_vlan %}
      {%- set key = interface.untagged_vlan.name + '|' + interface.name %}
      {%- set _ = vlans.append(interface.untagged_vlan) %}
      {%- set _ = vlan_members.update({key: {'tagging_mode': 'untagged'}}) %}
    {%- endif %}
  {%- endfor %}
  {%- set filtered_vlan_virt_interfaces = [] %}
  {%- for interface in device.interfaces.all() %}
    {%- if interface.is_virtual and 'vlan' in interface.name | lower %}
      {%- set _ = filtered_vlan_virt_interfaces.append(interface) %}
    {%- endif %}
  {%- endfor %}
  {%- if vlans %}
  "VLAN": {
  {%- for vlan in vlans | unique(attribute='vid') | sort(attribute='vid') %}
    "{{ vlan.name }}": {
      "vlanid": "{{ vlan.vid }}"
    }{% if not loop.last %},{% endif %}
  {%- endfor %}
  },
  "VLAN_INTERFACE": {
  {%- for interface in filtered_vlan_virt_interfaces | sort(attribute='name') %}
    "{{ interface.name }}": {}{%- if interface.ip_addresses.first() %},
    "{{ interface.name }}|{{ interface.ip_addresses.first().address }}": {}
    {%- endif %}
    {%- if not loop.last %},{%- endif %}
  {%- endfor %}
  },
  "VLAN_MEMBER": {
  {%- for key, value in vlan_members.items() | sort(attribute='0') %}
    "{{ key }}": {
      "tagging_mode": "{{ value.tagging_mode }}"
    }
    {%- if not loop.last %},{% endif %}
  {%- endfor %}
  },{%- endif %}
  "XCVRD_LOG": {
    "Y_CABLE": {
      "log_verbosity": "notice"
    }
  }
}